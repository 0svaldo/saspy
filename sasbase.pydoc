Help on module sasbase:

NAME
    sasbase

DESCRIPTION
    # Copyright SAS Institute
    #
    #  Licensed under the Apache License, Version 2.0 (the License);
    #  you may not use this file except in compliance with the License.
    #  You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    #  Unless required by applicable law or agreed to in writing, software
    #  distributed under the License is distributed on an "AS IS" BASIS,
    #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #  See the License for the specific language governing permissions and
    #  limitations under the License.
    #
    #
    #
    # This module is designed to connect to SAS from python, providing a natural python style interface.
    # it provides base functionality, data access and processing, and includes analytics and ODS results.
    # There is a configuration file named sascfg.py in the saspy package used to configure connections
    # to SAS. Currently supported methods are STDIO, connecting to a local (same machine) Linux SAS using
    # stdio methods (fork, exec, and pipes). The is also support for running STDIO over SSH, which can 
    # connect to a remote linux SAS via passwordless ssh. The ssh method cannot currently support interupt
    # handling, as the local STDIO method can. An interupt on this method can only terminate the SAS process; 
    # you'll be prompted to terminate or wait for completion. The third method is HTTP, which can connect
    # to SAS Viya via the Compute Servie, a restfull micro service in the Viay system.
    #
    # Each of these connection methods (access methods) are handled by their own IO module. This main
    # module determines which IO module to use based upon the configuration chosen at runtime. More
    # IO modules can be seemlessly plugged in, if needed, in the future.
    #
    # The expected use is to simply import this package and establish a SAS session, then use the methods:
    #
    # import saspy
    # sas = saspy.SASsession()
    # sas.[have_at_it]()
    #

CLASSES
    builtins.object
        SASconfig
        SASdata
        SASsession
    
    class SASconfig(builtins.object)
     |  This object is not intended to be used directly. Instantiate a SASsession object instead
     |  
     |  Methods defined here:
     |  
     |  __init__(self, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SASdata(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self, sassession, libref, table, results='HTML')
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  contents(self)
     |      display metadata about the table. size, number of rows, columns and their data type ...
     |  
     |  describe(self)
     |      display descriptive statistics for the table; summary statistics.
     |  
     |  head(self, obs=5)
     |      display the first n rows of a table
     |      obs - the number of rows of the table that you want to display. The default is 5
     |  
     |  heatmap(self, x:str, y:str, options:str='', title:str='', label:str='') -> 'a heatmap plot of the (numeric) variables you chose'
     |      Documentation link: http://support.sas.com/documentation/cdl/en/grstatproc/67909/HTML/default/viewer.htm#n0w12m4cn1j5c6n12ak64u1rys4w.htm
     |      :param x: x variable
     |      :param y: y variable
     |      :param options: display options (string)
     |      :param title: graph title
     |      :param label:
     |      :return:
     |  
     |  hist(self, var:str, title:str='', label:str='') -> 'a histogram plot of the (numeric) variable you chose'
     |      This method requires a numeric column (use the contents method to see column types) and generates a histogram.
     |      var   - the NUMERIC variable (column) you want to plot
     |      title - an optional Title for the chart
     |      label - LegendLABEL= value for sgplot
     |  
     |  means(self)
     |      display descriptive statistics for the table; summary statistics. This is an alias for 'describe'
     |  
     |  series(self, x:str, y:list, title:str='') -> 'a line plot of the x,y coordinates'
     |      This method plots a series of x,y coordinates. You can provide a list of y columns for multiple line plots.
     |      x     - the x axis variable; generally a time or continuous variable. 
     |      y     - the y axis variable(s), you can specify a single column or a list of columns 
     |      title - an optional Title for the chart
     |  
     |  set_results(self, results:str)
     |      This method set the results attribute for the SASdata object; it stays in effect till changed
     |      results - set the default result type for this SASdata object. 'HTML' = HTML. Anything else = 'TEXT'.
     |  
     |  tail(self, obs=5)
     |      display the last n rows of a table
     |      obs - the number of rows of the table that you want to display. The default is 5
     |  
     |  to_csv(self, file:str) -> 'The LOG showing the results of the step'
     |      This method will export a SAS Data Set to a file in CSV format.
     |      file    - the OS filesystem path of the file to be created (exported from this SAS Data Set)
     |  
     |  to_df(self, **kwargs) -> '<Pandas Data Frame object>'
     |      Export this SAS Data Set to a Pandas Data Frame
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SASsession(builtins.object)
     |  The SASsession object is the main object to instantiate and provides access to the rest of the functionality.
     |  cfgname - value in SAS_config_names List of the sascfg.py file
     |  kernel  - None - internal use when running the SAS_kernel notebook
     |  
     |  For the STDIO IO Module
     |  saspath - overrides saspath Dict entry of cfgname in sascfg.py file
     |  options - overrides options Dict entry of cfgname in sascfg.py file
     |  
     |  and for running STDIO over passwordless ssh
     |  ssh     - full path of the ssh command; /usr/bin/ssh for instance
     |  host    - host name of the remote machine
     |  
     |  and for the HTTP IO module to comnnect to Viya
     |  ip      - host address 
     |  port    - port; the code Defaults this to 80 (the Compute Services default port)
     |  context - context name defined on the compute service
     |  options - SAS options to include in the start up command line
     |  user    - user name to authenticate with
     |  pw      - password to authenticate with
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __init__(self, **kwargs) -> '<SASsession object>'
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  dataframe2sasdata(self, df:'<Pandas Data Frame object>', table:str='a', libref:str='', results:str='HTML') -> '<SASdata object>'
     |      This method imports a Pandas Data Frame to a SAS Data Set, returning the SASdata object for the new Data Set.
     |      df      - Pandas Data Frame to import to a SAS Data Set
     |      table   - the name of the SAS Data Set to create
     |      libref  - the libref for the SAS Data Set being created. Defaults to WORK, or USER if assigned
     |      results - format of results, HTML is default, TEXT is the alternative
     |  
     |  datasets(self, libref:str='') -> 'The LOG showing the output'
     |      This method is used to quesy a libref. The results show information about the libref including members.
     |      libref  - the libref to query
     |  
     |  df2sd(self, df:'<Pandas Data Frame object>', table:str='a', libref:str='', results:str='HTML') -> '<SASdata object>'
     |      This is an alias for 'dataframe2sasdata'. Why type all that?
     |      df      - Pandas Data Frame to import to a SAS Data Set
     |      table   - the name of the SAS Data Set to create
     |      libref  - the libref for the SAS Data Set being created. Defaults to WORK, or USER if assigned
     |      results - format of results, HTML is default, TEXT is the alternative
     |  
     |  exist(self, table:str, libref:str='') -> bool
     |      table  - the name of the SAS Data Set
     |      libref - the libref for the Data Set, defaults to WORK, or USER if assigned
     |      
     |      Returns True it the Data Set exists and False if it does not
     |  
     |  read_csv(self, file:str, table:str, libref:str='', results:str='HTML') -> '<SASdata object>'
     |      This method will import a csv file into a SAS Data Set and return the SASdata object referring to it.
     |      file    - eithe the OS filesystem path of the file, or HTTP://... for a url accessible file
     |      table   - the name of the SAS Data Set to create
     |      libref  - the libref for the SAS Data Set being created. Defaults to WORK, or USER if assigned
     |      results - format of results, HTML is default, TEXT is the alternative
     |  
     |  sasdata(self, table:str, libref:str='', results:str='HTML') -> '<SASdata object>'
     |      This method creates a SASdata object for the SAS Data Set you specify
     |      table   - the name of the SAS Data Set
     |      libref  - the libref for the Data Set, defaults to WORK, or USER if assigned
     |      results - format of results, HTML is default, TEXT is the alternative
     |  
     |  sasdata2dataframe(self, table:str, libref:str='', **kwargs) -> '<Pandas Data Frame object>'
     |      This method exports the SAS Data Set to a Pandas Data Frame, returning the Data Frame object.
     |      table   - the name of the SAS Data Set you want to export to a Pandas Data Frame
     |      libref  - the libref for the SAS Data Set.
     |  
     |  sasets(self) -> '<SASets object>'
     |      This methods creates a SASets object which you can use to run various analytics. See the sasets.py module.
     |  
     |  saslib(self, libref:str, engine:str=' ', path:str='', options:str=' ') -> 'The LOG showing the assignment of the libref'
     |      This method is used to assign a libref. The libref is then available to be used in the SAS session.
     |      libref  - the libref for be assigned
     |      engine  - the engine name used to access the SAS Library (engine defaults to BASE, per SAS)
     |      path    - path to the library (for engines that take a path parameter)
     |      options - other engine or engine supervisor options
     |  
     |  saslog(self) -> 'The SAS Log for the session'
     |      this method is used to get the current, full contents of the SASLOG
     |  
     |  sasml(self) -> '<SASqc object>'
     |      This methods creates a SASML object which you can use to run various analytics. See the sasml.py module.
     |  
     |  sasqc(self) -> '<SASqc object>'
     |      This methods creates a SASqc object which you can use to run various analytics. See the sasqc.py module.
     |  
     |  sasstat(self) -> '<SASstat object>'
     |      This methods creates a SASstat object which you can use to run various analytics. See the sasstat.py module.
     |  
     |  sd2df(self, table:str, libref:str='', **kwargs) -> '<Pandas Data Frame object>'
     |      This is an alias for 'sasdata2dataframe'. Why type all that?
     |      sd      - SASdata object that refers to the Sas Data Set you want to export to a Pandas Data Frame
     |      table   - the name of the SAS Data Set you want to export to a Pandas Data Frame
     |      libref  - the libref for the SAS Data Set.
     |  
     |  set_batch(self, batch:bool)
     |      This method sets the batch attribute for the SASsession object; it stays in effect untill changed. For methods that just
     |      display results like SASdata object methods (head, tail, hist, series) and SASresult object results, you can set 'batch'
     |      to true to get the results back directly so you can write them to files or whatever you want to do with them. This is intended
     |      for use in python batch scripts so you can still get ODS XML5 results and save them to files, which you couldn't otherwise do for
     |      these methods. When running interactivly, the expectation is that you want to have the results directly rendered, but you can
     |      run this way too; get the objects display them yourself and/or write them to somewhere. When true, you get the same dictionary
     |      returned as from the SASsession.submit() method.
     |      
     |      batch - set the default result type for this SASsession. True = return dict([LOG, LST]. False = display LST to screen.
     |  
     |  submit(self, code:str, results:str='html', prompt:dict=[]) -> dict
     |      This method is used to submit any SAS code. It returns the Log and Listing as a python dictionary.
     |      code    - the SAS statements you want to execute 
     |      results - format of results, HTML is default, TEXT is the alternative
     |      prompt  - dict of names:flags to prompt for; create marco variables (used in submitted code), then keep or delete
     |                The keys are the names of the macro variables and the boolean flag is to either hide what you type and delete
     |                the macros, or show what you type and keep the macros (they will still be available later)
     |                for example (what you type for pw will not be displayed, user and dsname will):
     |      
     |                results = sas.submit(
     |                   """
     |                   libname tera teradata server=teracop1 user=&user pw=&pw;
     |                   proc print data=tera.&dsname (obs=10); run;
     |                   """ ,
     |                   prompt = {'user': False, 'pw': True, 'dsname': False}
     |                   )
     |      
     |      Returns - a Dict containing two keys:values, [LOG, LST]. LOG is text and LST is 'results' (HTML or TEXT)
     |      
     |      NOTE: to view HTML results in the ipykernel, issue: from IPython.display import HTML  and use HTML() instead of print()
     |      i.e,: results = sas.submit("data a; x=1; run; proc print;run')
     |            print(results['LOG'])
     |            HTML(results['LST'])
     |  
     |  teach_me_SAS(self, nosub:bool)
     |      nosub - bool. True means don't submit the code, print it out so I can see what the SAS code would be.
     |                    False means run normally - submit the code.
     |  
     |  write_csv(self, file:str, table:str, libref:str='') -> 'The LOG showing the results of the step'
     |      This method will export a SAS Data Set to a file in CSV format.
     |      file    - the OS filesystem path of the file to be created (exported from the SAS Data Set)
     |      table   - the name of the SAS Data Set you want to export to a CSV file
     |      libref  - the libref for the SAS Data Set.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

DATA
    logger = <logging.RootLogger object>
    running_on_win = False

FILE
    /opt/tom/gitlab/metis/saspy_pip/saspy/sasbase.py


