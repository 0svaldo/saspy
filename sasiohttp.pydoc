Help on module sasiohttp:

NAME
    sasiohttp

DESCRIPTION
    # Copyright SAS Institute
    #
    #  Licensed under the Apache License, Version 2.0 (the License);
    #  you may not use this file except in compliance with the License.
    #  You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    #  Unless required by applicable law or agreed to in writing, software
    #  distributed under the License is distributed on an "AS IS" BASIS,
    #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #  See the License for the specific language governing permissions and
    #  limitations under the License.
    #

CLASSES
    builtins.object
        SASconfigHTTP
        SASsessionHTTP
    
    class SASconfigHTTP(builtins.object)
     |  This object is not intended to be used directly. Instantiate a SASsession object instead
     |  
     |  Methods defined here:
     |  
     |  __init__(self, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
    
    class SASsessionHTTP(builtins.object)
     |  The SASsession object is the main object to instantiate and provides access to the rest of the functionality.
     |  cfgname - value in SAS_config_names List of the sascfg.py file
     |  kernel  - None - internal use when running the SAS_kernel notebook
     |  user    - userid to use to connect to Compute Service
     |  pw      - pw for the userid being used to connect to Compute Service
     |  ip      - overrides IP      Dict entry of cfgname in sascfg.py file
     |  port    - overrides Port    Dict entry of cfgname in sascfg.py file
     |  context - overrides Context Dict entry of cfgname in sascfg.py file 
     |  options - overrides Options Dict entry of cfgname in sascfg.py file
     |  
     |  Methods defined here:
     |  
     |  __del__(self)
     |  
     |  __init__(self, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  dataframe2sasdata(self, df:'<Pandas Data Frame object>', table:str='a', libref:str='work', results:str='HTML') -> '<SASdata object>'
     |      This method imports a Pandas Data Frame to a SAS Data Set, returning the SASdata object for the new Data Set.
     |      df      - Pandas Data Frame to import to a SAS Data Set
     |      table   - the name of the SAS Data Set to create
     |      libref  - the libref for the SAS Data Set being created. Defaults to WORK
     |      results - format of results, HTML is default, TEXT is the alternative
     |  
     |  read_csv(self, file:str, table:str, libref:str='work', results:str='HTML', nosub:bool=False) -> '<SASdata object>'
     |      This method will import a csv file into a SAS Data Set and return the SASdata object referring to it.
     |      file    - eithe the OS filesystem path of the file, or HTTP://... for a url accessible file
     |      table   - the name of the SAS Data Set to create
     |      libref  - the libref for the SAS Data Set being created. Defaults to WORK
     |      results - format of results, HTML is default, TEXT is the alternative
     |  
     |  sasdata2dataframe(self, sd:'<SASdata object>') -> '<Pandas Data Frame object>'
     |      This method exports the SAS Data Set to a Pandas Data Frame, returning the Data Frame object.
     |      sd      - SASdata object that refers to the Sas Data Set you want to export to a Pandas Data Frame
     |  
     |  saslog(self)
     |      this method is used to get the current, full contents of the SASLOG
     |  
     |  submit(self, code:str, results:str='html', prompt:dict=[]) -> dict
     |      code    - the SAS statements you want to execute 
     |      results - format of results, HTML is default, TEXT is the alternative
     |      prompt  - dict of names,flag to prompt for; create marco variables (used in submitted code), then delete
     |                The keys are the names of the macro variables and the boolean flag is to hide what you type or not
     |                for example:
     |      
     |                results = sas.submit(
     |                   """
     |                   libname tera teradata server=teracop1 user=&user pw=&pw;
     |                   proc print data=tera.&dsname (obs=10); run;
     |                   """ ,
     |                   prompt = {'user': False, 'pw': True, 'dsname': False}
     |                   )
     |      
     |      Returns - a Dict containing two keys:values, [LOG, LST]. LOG is text and LST is 'results' (HTML or TEXT)
     |      
     |      NOTE: to view HTML results in the ipykernel, issue: from IPython.display import HTML  and use HTML() instead of print()
     |      i.e,: results = sas.submit("data a; x=1; run; proc print;run')
     |            print(results['LOG'])
     |            HTML(results['LST'])
     |  
     |  to_csv(self, file:str, data:'<SASdata object>', nosub:bool=False) -> 'The LOG showing the results of the step'
     |      This method will export a SAS Data Set to a file in CCSV format.
     |      file    - the OS filesystem path of the file to be created (exported from this SAS Data Set)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

FUNCTIONS
    sleep(...)
        sleep(seconds)
        
        Delay execution for a given number of seconds.  The argument may be
        a floating point number for subsecond precision.

DATA
    sas_date_fmts = ('AFRDFDD', 'AFRDFDE', 'AFRDFDE', 'AFRDFDN', 'AFRDFDWN...
    sas_datetime_fmts = ('AFRDFDT', 'AFRDFDT', 'ANYDTDTM', 'B8601DN', 'B86...
    sas_time_fmts = ('ANYDTTME', 'B8601LZ', 'B8601LZ', 'B8601TM', 'B8601TM...

FILE
    /net/sanyo.unx.sas.com/vol/vol810/u81/sastpw/tkpygit/metis/tomhttp/metis/saspy_pip/saspy/sasiohttp.py


